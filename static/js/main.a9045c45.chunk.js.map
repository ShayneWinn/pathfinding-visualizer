{"version":3,"sources":["components/Panel.js","components/Field.js","components/HexField.js","hex/Hex.js","App.js","reportWebVitals.js","index.js"],"names":["Panel","Component","props","handleMouseDrag","e","onDrag","movementX","movementY","handleMouseDown","console","log","mouseDown","window","addEventListener","handleMouseUp","removeEventListener","state","x","y","moveX","moveY","this","setState","className","style","left","top","onMouseDown","header","children","HexField","handleMouseMove","onMouseMove","onMouseUp","coords","svgHexes","hexes","hex","size","Math","sqrt","q","r","viewOffset","w","h","push","points","classes","class","height","width","overflow","position","xmlns","fill","stroke","strokeOpacity","Hex","_q","_r","_s","NaN","s","assert","other","worldToHex","rq","round","rr","rs","dq","abs","dr","ds","hexRound","StateMachine","require","App","hexMap","Map","offset","mapWidth","mapHeight","hexSize","button1Text","button2Text","button3Text","button1Callback","button2Callback","button3Callback","stateMachine","init","transitions","name","from","to","methods","oldStateMachine","onState1","onState2","onState3","onState4","start","divElement","clientWidth","clientHeight","hexWidth","ceil","hexHeight","r_off","floor","set","toString","state2tran","state3tran","state4tran","state1tran","i","event","pageX","pageY","is","hexDraw","get","can","drawWall","forceUpdate","eraseWall","finishDraw","bottom","ref","hexFieldMouseDown","hexFieldMouseMove","hexFieldMouseUp","onClick","handelClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9045c45.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport '../style/Panel.css'; // style sheet for the panel elements\r\n\r\nclass Panel extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            x: 1000,\r\n            y: 10\r\n        }\r\n\r\n        this.mouseDown = false;\r\n    }\r\n\r\n    onDrag(moveX, moveY) {\r\n        const x = this.state.x + moveX;\r\n        const y = this.state.y + moveY;\r\n\r\n        this.setState({\r\n            x: x,\r\n            y: y\r\n        })\r\n    };\r\n\r\n    handleMouseDrag = (e) => this.onDrag(e.movementX, e.movementY);\r\n\r\n    handleMouseDown = () => {\r\n        console.log(\"MouseDown-panel\");\r\n        this.mouseDown = true;\r\n        window.addEventListener('mouseup', this.handleMouseUp);\r\n        window.addEventListener('mousemove', this.handleMouseDrag);\r\n    };\r\n\r\n    handleMouseUp = () => {\r\n        console.log(\"MouseUp-panel\");\r\n        this.mouseDown = false;\r\n        window.removeEventListener('mouseup', this.handleMouseUp);\r\n        window.removeEventListener('mousemove', this.handleMouseDrag);\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"panel\" \r\n                style={{left: this.state.x, top: this.state.y}}\r\n                onMouseDown={(e) => this.handleMouseDown(e)}\r\n            >\r\n            <div className=\"panel-header\">\r\n                {this.props.header}\r\n            </div>\r\n            <div className=\"panel-content\">\r\n                {this.props.children}\r\n            </div>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\n/*\r\n    <PanelHeader \r\n    onDrag={(moveX, moveY) => this.handleDrag(moveX, moveY)} \r\n    header={this.props.header}\r\n    />\r\n*/\r\n\r\nexport default Panel;","import React, {Component} from \"react\";\r\nimport '../style/Field.css'; // style sheet for the Field and Cells\r\n\r\n/**\r\n * Field is the Component that handles drawing the cells and path\r\n */\r\nclass Field extends Component {\r\n    /// Constructor\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.cellSize = 30;\r\n        this.srawing = false;\r\n\r\n        this.state = {\r\n            height: 0,\r\n            width: 0,\r\n            nCellsHigh: 0,\r\n            nCellsWide: 0,\r\n            cells: []\r\n        }\r\n    }\r\n\r\n    /// Called after the component is inserted into the tree\r\n    componentDidMount() {\r\n        const cellSize = this.cellSize;\r\n        const height = this.divElement.clientHeight;\r\n        const width = this.divElement.clientWidth;\r\n        const nCellsHigh = Math.ceil(height / cellSize);\r\n        const nCellsWide = Math.ceil(width / cellSize);\r\n        const cells = this.state.cells.slice();\r\n\r\n        for(let j = 0; j < nCellsHigh; j++){\r\n            for(let i = 0; i < nCellsWide; i++){\r\n                cells.push({\r\n                    x: i,\r\n                    y: j,\r\n                    state: 0\r\n                })\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            height: height,\r\n            width: width,\r\n            nCellsHigh: nCellsHigh,\r\n            nCellsWide: nCellsWide,\r\n            cells: cells\r\n        })\r\n    }\r\n\r\n    /// Called by the <svg /> component when the mouse is pressed\r\n    handleMouseDown(event){\r\n        const coords = this.toGridCoords(event.pageX, event.pageY);\r\n        console.log(\"mouseDown (\" + coords[0] + \", \" + coords[1] + \")-feild\");\r\n        this.drawing=true;\r\n    }\r\n\r\n    /// Called by the <svg /> component when the mouse is released\r\n    handleMouseUp(event){\r\n        const coords = this.toGridCoords(event.pageX, event.pageY);\r\n        console.log(\"MouseUp-feild\");\r\n        this.drawing=false;\r\n    }\r\n\r\n    /// Called by the <svg /> component when the mouse is moved\r\n    handleMouseMove(event){\r\n        if(!this.drawing){\r\n            return;\r\n        }\r\n        const coord = this.toGridCoords(event.pageX, event.pageY);\r\n        console.log(\"MouseMove (\" + coord[0] + \", \" + coord[1] + \")-feild\");\r\n        const cells = this.state.cells.slice();\r\n\r\n        cells[(coord[1] * this.state.nCellsWide) + coord[0]].state = 1;\r\n\r\n        this.setState({\r\n            height: this.state.height,\r\n            width: this.state.width,\r\n            nCellsHigh: this.state.nCellsHigh,\r\n            nCellsWide: this.state.nCellsWide,\r\n            cells: cells\r\n        })\r\n    }\r\n\r\n    /// Converts screen coords to grid coords, \r\n    ///     only works if element is in upper left corner\r\n    toGridCoords(x, y){\r\n        const rect = this.divElement.getBoundingClientRect();\r\n        console.log(rect);\r\n        return([\r\n            Math.floor((x - rect.x)/this.cellSize), \r\n            Math.floor((y + rect.y)/this.cellSize)\r\n        ]);\r\n        \r\n    }\r\n\r\n    /// Called to render all cells\r\n    renderCells(){\r\n        var cells = []\r\n        for(let i = 0; i < this.state.cells.length; i++){\r\n            let classes = 'cell'\r\n            switch(this.state.cells[i].state){\r\n                case 0:\r\n                    classes += ' cell-air';\r\n                    break;\r\n                case 1:\r\n                    classes += ' cell-wall';\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            cells.push(\r\n                <rect \r\n                    x={this.state.cells[i].x*this.cellSize + (0 * this.cellSize)}\r\n                    y={this.state.cells[i].y*this.cellSize + (0 * this.cellSize)}\r\n                    r={this.cellSize * 0.25 * 0}\r\n                    width={this.cellSize} height={this.cellSize}\r\n                    class={classes}\r\n                />\r\n            )\r\n        }\r\n        return cells;\r\n    }\r\n    \r\n    /// Called to render the component\r\n    render(){\r\n        return (\r\n            <div \r\n                class=\"field-div\" ref={(divElement) => this.divElement = divElement}\r\n            >\r\n                <svg \r\n                    height={this.state.height} \r\n                    width={this.state.width} \r\n                    style={{overflow:'hidden', top:'0px', left:'0px', position:'absolute'}}\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    onMouseMove={(event) => this.handleMouseMove(event)}\r\n                    onMouseDown={(event) => this.handleMouseDown(event)}\r\n                    onMouseUp={(event) => this.handleMouseUp(event)}\r\n                >\r\n                    {this.renderCells()}\r\n                </svg>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Field","import { Component } from 'react';\r\nimport '../style/HexField.css'\r\n\r\nclass HexField extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.props = props;\r\n\r\n        this.handleMouseMove = (e) => this.props.onMouseMove(e);\r\n        this.handleMouseDown = (e) => this.props.onMouseDown(e);\r\n        this.handleMouseUp   = (e) => this.props.onMouseUp(e);\r\n    }\r\n\r\n    render() {\r\n        let coords = []\r\n        let svgHexes = []\r\n\r\n        for(let [key, hex] of this.props.hexes){\r\n            const x = this.props.size * (Math.sqrt(3) * hex.q + Math.sqrt(3)/2 * hex.r) + this.props.viewOffset[0];\r\n            const y = this.props.size * (3/2 * hex.r) + this.props.viewOffset[1];\r\n            const w = Math.sqrt(3) * this.props.size;\r\n            const h = 2 * this.props.size;\r\n            coords.push([x, y]);\r\n            let points = [\r\n                [             x,    y +  (0.5  * h)],\r\n                [-(0.5 * w) + x,    y +  (0.25 * h)],\r\n                [-(0.5 * w) + x,    y + -(0.25 * h)],\r\n                [             x,    y + -(0.5  * h)],\r\n                [ (0.5 * w) + x,    y + -(0.25 * h)],\r\n                [ (0.5 * w) + x,    y +  (0.25 * h)]\r\n            ]\r\n\r\n            let classes = \"hex\"\r\n            classes += (hex.state === 0 ? \" hex-air\": \" hex-wall\")\r\n\r\n            svgHexes.push(\r\n                    <polygon\r\n                        points={points}\r\n                        class = {classes}\r\n                    />\r\n            );\r\n        }\r\n\r\n        return(\r\n            <svg\r\n                height={this.props.height}\r\n                width = {this.props.width}\r\n                style={{overflow:'hidden', top:'0px', left:'0px', position:'absolute'}}\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                onMouseMove={this.handleMouseMove}\r\n                onMouseDown={this.handleMouseDown}\r\n                onMouseUp=  {this.handleMouseUp}\r\n            >\r\n                <polygon \r\n                    points={[0, 0, this.props.width, 0, this.props.width, this.props.height, 0, this.props.height]}\r\n                    fill=\"rgba(0, 0, 0, 0)\"\r\n                    stroke=\"#000\"\r\n                    strokeOpacity=\"0.2\"\r\n                />\r\n                {svgHexes}\r\n            </svg>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default HexField;","/**\r\n * This was written with the help of:\r\n * https://www.redblobgames.com/grids/hexagons/\r\n */\r\nexport class Hex {\r\n    q = NaN;\r\n    r = NaN;\r\n    s = NaN;\r\n    state = null;\r\n\r\n    constructor(_q, _r, _s) {\r\n        console.assert(_q + _r + _s === 0);\r\n        this.q = _q;\r\n        this.r = _r;\r\n        this.s = _s;\r\n        this.state = 0;\r\n    }\r\n\r\n    equals(other){\r\n        return (this.q === other.q && this.r === other.r && this.s === other.s);\r\n    }\r\n}\r\n\r\nexport function hexAdd(a, b) {\r\n    return Hex(a.q + b.q, a.r + b.r, a.s + b.s);\r\n}\r\n\r\nexport function hexSubtract(a, b) {\r\n    return Hex(a.q - b.q, a.r - b.r, a.s - b.s);\r\n}\r\n\r\nexport function hexMultiply(a, k) {\r\n    return Hex(a.q * k, a.r * k, a.s * k);\r\n}\r\n\r\nexport function hexLength(hex){\r\n    return Math.floor((Math.abs(hex.q) + Math.abs(hex.q) + Math.abs(hex.q)) / 2);\r\n}\r\n\r\nexport function hexDistance(a, b){\r\n    return hexLength(hexSubtract(a, b));\r\n}\r\n\r\nexport function hexRound(q, r, s){\r\n    var rq = Math.round(q);\r\n    var rr = Math.round(r);\r\n    var rs = Math.round(s);\r\n\r\n    var dq = Math.abs(rq - q);\r\n    var dr = Math.abs(rr - r);\r\n    var ds = Math.abs(rs - s);\r\n\r\n    if(dq > dr && dq > ds){\r\n        rq = -rr-rs\r\n    }\r\n    else if (dr > ds){\r\n        rr = -rq-rs\r\n    }\r\n    else {\r\n        rs = -rq-rr\r\n    }\r\n\r\n    return[rq, rr, rs];\r\n}\r\n\r\nexport function worldToHex(x, y, size){\r\n    var q = (Math.sqrt(3)/3 * x - 1/3 * y) / size;\r\n    var r = (2/3 * y) / size;\r\n    var s = (-q-r);\r\n    return (hexRound(q, r, s));\r\n}","import { Component } from 'react';\nimport Field from './components/Field'\nimport Panel from './components/Panel'\nimport HexField from './components/HexField'\nimport * as Hex from './hex/Hex'\nimport './App.css';\nvar StateMachine = require('javascript-state-machine')\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      hexMap: new Map(),\n      offset: [0, 0],\n      mapWidth: 0,\n      mapHeight: 0,\n      hexSize: 20,\n      button1Text: \"State 1\",\n      button2Text: \"State 2\",\n      button3Text: \"State 3\",\n      button1Callback: null,\n      button2Callback: null,\n      button3Callback: null\n    }\n\n    this.stateMachine = new StateMachine({\n      init: 'none',\n      transitions: [\n        {name: 'start',     from: 'none',   to: 'ready'},\n        {name: 'drawWall',    from: 'ready',  to: 'drawingWalls'},\n        {name: 'eraseWall',   from: 'ready',  to: 'erasingWalls'},\n        {name: 'finishDraw',  from:['drawingWalls', 'erasingWalls'], to: 'ready'}\n      ],\n      methods: [\n\n      ]\n    })\n\n    this.oldStateMachine = new StateMachine({\n      init: 'none',\n      transitions: [\n        { name: 'start',       from: 'none', to:'state1'},\n        { name: 'state1tran', from: ['state2', 'state3', 'state4'],    to:'state1'},\n        { name: 'state2tran', from: ['state1', 'state3', 'state4'],    to:'state2'},\n        { name: 'state3tran', from: ['state1', 'state2', 'state4'],    to:'state3'},\n        { name: 'state4tran', from: ['state1', 'state2', 'state3'],    to:'state4'}\n      ],\n      methods: {\n        onState1: () => this.onState1(),\n        onState2: () => this.onState2(),\n        onState3: () => this.onState3(),\n        onState4: () => this.onState4()\n      }\n    })\n    /*\n    this.state.hexMap.set([0, 0, 0 ].toString(), new Hex.Hex(0, 0, 0) );\n    this.state.hexMap.set([0, 1, -1].toString(), new Hex.Hex(0, 1, -1));\n    this.state.hexMap.set([0, -1, 1].toString(), new Hex.Hex(0, -1, 1));\n    this.state.hexMap.set([1, -1, 0].toString(), new Hex.Hex(1, -1, 0));\n    this.state.hexMap.set([-1, 1, 0].toString(), new Hex.Hex(-1, 1, 0));\n    this.state.hexMap.set([1, 0, -1].toString(), new Hex.Hex(1, 0, -1));\n    this.state.hexMap.set([-1, 0, 1].toString(), new Hex.Hex(-1, 0, 1));\n    */\n  }\n\n  componentDidMount(){\n    this.oldStateMachine.start();\n    this.stateMachine.start();\n    const mapWidth = this.divElement.clientWidth;\n    const mapHeight = this.divElement.clientHeight;\n\n    const hexWidth = Math.ceil(mapWidth / (Math.sqrt(3) * this.state.hexSize)) + 1;\n    const hexHeight = Math.ceil(mapHeight / (0.75 * 2 * this.state.hexSize)) + 1;\n    console.log(hexHeight);\n    for(let r = 0; r < hexHeight; r++){\n      let r_off = Math.floor(r/2);\n      for(let q = -r_off; q < hexWidth - r_off; q++){\n        this.state.hexMap.set([q, r, -q-r].toString(), new Hex.Hex(q, r, -q-r));\n      }\n    }\n\n    this.setState({\n      hexMap: this.state.hexMap,\n      offset: this.state.offset,\n      mapWidth: mapWidth,\n      mapHeight: mapHeight,\n      hexSize: this.state.hexSize,\n      button1Text: this.state.button1Text,\n      button2Text: this.state.button2Text,\n      button3Text: this.state.button3Text,\n      button1Callback: this.state.button1Callback,\n      button2Callback: this.state.button2Callback,\n      button3Callback: this.state.button3Callback\n    });\n  }\n\n  onState1(){\n    const button1Text = \"State2\";\n    const button2Text = \"State3\";\n    const button3Text = \"State4\";\n\n    this.setState({\n      button1Text: button1Text,\n      button2Text: button2Text,\n      button3Text: button3Text,\n      button1Callback: ()=>{this.oldStateMachine.state2tran()},\n      button2Callback: ()=>{this.oldStateMachine.state3tran()},\n      button3Callback: ()=>{this.oldStateMachine.state4tran()}\n    })\n  }\n\n  onState2(){\n    const button1Text = \"State1\";\n    const button2Text = \"State3\";\n    const button3Text = \"State4\";\n\n    this.setState({\n      button1Text: button1Text,\n      button2Text: button2Text,\n      button3Text: button3Text,\n      button1Callback: ()=>{this.oldStateMachine.state1tran()},\n      button2Callback: ()=>{this.oldStateMachine.state3tran()},\n      button3Callback: ()=>{this.oldStateMachine.state4tran()}\n    })\n  }\n\n  onState3(){\n    const button1Text = \"State1\";\n    const button2Text = \"State2\";\n    const button3Text = \"State4\";\n\n    this.setState({\n      button1Text: button1Text,\n      button2Text: button2Text,\n      button3Text: button3Text,\n      button1Callback: ()=>{this.oldStateMachine.state1tran()},\n      button2Callback: ()=>{this.oldStateMachine.state2tran()},\n      button3Callback: ()=>{this.oldStateMachine.state4tran()}\n    })\n  }\n\n  onState4(){\n    const button1Text = \"State1\";\n    const button2Text = \"State2\";\n    const button3Text = \"State3\";\n\n    this.setState({\n      button1Text: button1Text,\n      button2Text: button2Text,\n      button3Text: button3Text,\n      button1Callback: ()=>{this.oldStateMachine.state1tran()},\n      button2Callback: ()=>{this.oldStateMachine.state2tran()},\n      button3Callback: ()=>{this.oldStateMachine.state3tran()}\n    })\n  }\n\n  handelClick(i){\n    switch(i){\n      case 1:\n        this.state.button1Callback();\n        break;\n      case 2:\n        this.state.button2Callback();\n        break;\n      case 3:\n        this.state.button3Callback();\n        break;\n      default:\n        console.log(\"ERROR\");\n        break;\n    }\n  }\n\n  hexFieldMouseMove(event){\n    var x = event.pageX - this.state.offset[0];\n    var y = event.pageY - this.state.offset[1];\n    if(this.stateMachine.is('drawingWalls')){\n      this.hexDraw(Hex.worldToHex(x, y, this.state.hexSize), 1);\n    }\n    else if(this.stateMachine.is('erasingWalls')){\n      this.hexDraw(Hex.worldToHex(x, y, this.state.hexSize), 0);\n    }\n    /*\n    for(let hex of this.state.hexMap.values()){\n      hex.state = 0;\n    }\n    if(hex){\n      hex.state = 1;\n    }\n    this.forceUpdate();\n    */\n    \n  }\n\n  hexFieldMouseDown(event){\n    const x = event.pageX; const y = event.pageY;\n    const hex = this.state.hexMap.get(Hex.worldToHex(x, y, this.state.hexSize).toString());\n    if(hex){\n      if(this.stateMachine.can('drawWall') && hex.state === 0){\n        this.stateMachine.drawWall();\n\n        hex.state=1;\n        this.forceUpdate();\n      }\n      else if(this.stateMachine.can('eraseWall') && hex.state !== 0){\n        this.stateMachine.eraseWall();\n\n        hex.state=0;\n        this.forceUpdate();\n      }\n    }\n  }\n\n  hexFieldMouseUp(){\n    if(this.stateMachine.can('finishDraw')){\n      this.stateMachine.finishDraw();\n    }\n  }\n\n  hexDraw(coords, state){\n    const hex = this.state.hexMap.get(coords.toString());\n    if(hex){\n      hex.state = state;\n    }\n    this.forceUpdate();\n  }\n\n  render() {\n    return (\n      <div \n        class=\"App\" \n        style={{top: \"0px\", bottom:\"0px\", width:\"100%\", position:'absolute'}}\n        ref={(divElement) => this.divElement = divElement}\n      >\n        <div class=\"header\" />\n          <HexField \n            width={this.state.mapWidth} height ={this.state.mapHeight}\n            size={this.state.hexSize}\n            hexes={this.state.hexMap}\n            viewOffset={this.state.offset}\n            onMouseDown={(e) => this.hexFieldMouseDown(e)}\n            onMouseMove={(e) => this.hexFieldMouseMove(e)}\n            onMouseUp=  {(e) => this.hexFieldMouseUp(e)}\n          />\n          <Panel header={this.stateMachine.state}>\n            <button \n              class=\"panel-button\"\n              onClick={() => this.handelClick(1)}\n            >\n              {this.state.button1Text}\n            </button>\n            <button \n              class=\"panel-button\"\n              onClick={() => this.handelClick(2)}\n            >\n              {this.state.button2Text}\n            </button>\n            <button \n              class=\"panel-button\"\n              onClick={() => this.handelClick(3)}\n            >\n              {this.state.button3Text}\n            </button>\n          </Panel>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}